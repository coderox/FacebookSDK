//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#
    XmlDocument doc = new XmlDocument();
    doc.Load(classDefFile);

    XmlNode rootNode = doc.SelectSingleNode("class");

    string className = rootNode.Attributes["name"].Value;
    bool bindable = ((rootNode.Attributes["bindable"] != null) && rootNode.Attributes["bindable"].Value.Equals("yes"));
#>

#include "pch.h"
#include "Graph.<#= className #>.h"

using namespace winrt;
using namespace Windows::Data::Json;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;
<#  
    if (bindable)
    {
#>
using namespace winrt::Windows::ApplicationModel::Core;
using namespace winrt::Windows::UI::Xaml::Data;

<#
    }
#>

namespace winrt::winsdkfb::Graph::implementation
{
<#
    XmlNodeList props = rootNode.SelectNodes("property");
    for (int i = 0; i < props.Count; i++)
    {
        XmlNode prop = props[i];
        string propName = PropNameFor(prop);
        string varName = MemberNameFor(prop);
        string rtType = RTTypeFor(prop);
#>
    <#= rtType #> <#= className #>::<#= propName #>()
    {
        return <#= varName #>;
    }
    void <#= className #>::<#= propName #>(<#= rtType #> const& value)
    {
        <#= varName #> = value;
<#
    if (bindable)
    {
#>
        NotifyPropertyChanged(L"<#= propName #>");
<#
    }
#>
    }

<#
    }
#>
    IInspectable <#= className #>::FromJson(
        hstring const& JsonText 
        )
    {
        auto result = winrt::make_self<<#= className #>>();
        int found = 0;
        JsonValue val{ nullptr };

        if (JsonValue::TryParse(JsonText, val))
        {
            if (val.ValueType() == JsonValueType::Object)
            {
                JsonObject obj = val.GetObject();
                for (auto&& current : obj)
                {
                    winrt::hstring key = current.Key();
<#
    for (int i = 0; i < props.Count; i++)
    {
        XmlNode prop = props[i];
        string typeName = prop.Attributes["type"].Value;
        string propName = prop.Attributes["name"].Value;
        string classPropName = PropNameFor(prop);
        string gettor = GetterNameFor(typeName);
        string castPrefix = CastPrefixFor(typeName);
        string castSuffix = CastSuffixFor(typeName);
        string ifPrefix;
        if (i == 0)
        {
            ifPrefix = "if ";
        }
        else
        {
            ifPrefix = "else if";
        }
#>
                    <#= ifPrefix #> (key == L"<#= propName #>")
                    {
<#
        if (typeName.Equals("fbclass"))
        {
            string memberClassName = prop.Attributes["className"].Value;
            string memberClassType = RTTypeFor(prop);
#>
                        found++;
                        result-><#= classPropName #>(<#= memberClassName #>::FromJson(current.Value().Stringify()).as<<#= memberClassType #>>());
<#
        }
        else
        {
#>
                        found++;
                        result-><#= classPropName #>(<#= castPrefix #>current.Value().<#= gettor #>()<#= castSuffix #>);
<#
        }
#>
                    }
<#
    }
#>
                }

				if(!found){
					result = nullptr;
				}
            }
        }
        return result.as<IInspectable>();
    }
}
<#@ include file="Utility.ttinclude" #>
